#!/usr/bin/env bash

# SafeFox v0.1 alpha

declare -A BROWSERS_PATH=(
    ["firefox"]="$HOME/.mozilla/firefox"
    ["Librewolf"]="$HOME/.librewolf"
    #["WaterFox"]="$HOME/.waterfox"
	["Dummy"]="$HOME/Git/Safefox/dummyprofiles") # For debugging purposes

TMPDIR=/tmp/safefox
LOGFILE=/tmp/safefox.log
SANDBOX_DEFAULT="1"

FJ="" # Turn on or off Firejail SUID isolation
FA="" # Default options for Firejail

check_dependencies(){
	# Check for firejail, apparmor and X11 Xephyr
	(! where firejail) && echo "Info: The optional dependency 'Firejail' isn't installed"
	(! where apparmor_parser ) && echo "Info: The optional dependecy 'Appamor isn't installed"
	(! where Xephir ) && echo "Info: The optional dependecy 'xorg-server-xephyr' isn't installed"
	
	# Check if user is a X11 Session
	[ ! $DISPLAY ] && echo "You're possibly not in a X11 Session. X11 nested session is deactivated"
	
}

arguments_parser(){
    while [ "$1" ] ; do
        case $1 in 
            "--tmpfolder"|"-t") export TMPDIR=$2 ;;
            "--help"|"-h"     ) export help=1    ;;
        esac
        shift
    done   
}

callforhelp(){
    cat <<< "Usage: safefox [options]

SafeFox is a bash script utility to create and manage encrypted profiles for Firefox based browsers.

Options:
--tmpfolder              - Change the default temporary folder (default:/tmp/safefox)
--help,              -h  - Prints this help message"
    exit 1
}

operation(){
    dialog --title "SafeFox" --menu "Select an operation" 10 80 0 \
    "Create"  " Create a new encrypted profile" \
    "Restore" " Decript a profile to its original state" \
    "Launch"    " Start the browser with an encrypted profile" \
    "Recover" " Recover a profile after a sudden shutdown" \
    3>&1 1>&2 2>&3
}

which_browser(){
    local browlist=()
    while IFS=$'\n' read -r key; do
        browlist+=("$key" "")
    done < <(printf "%s\n" "${!BROWSERS_PATH[@]}")
    
    dialog --title "Browser selection" \
    --menu "Select the browser" 10 25 3 \
    "${browlist[@]}"  3>&1 1>&2 2>&3
}

browser_path(){
    local browser=$1 
    echo "${BROWSERS_PATH["$browser"]}"
}

profile(){
    [ "$1" ] || return 1
    local ini="$1/profiles.ini"
    
    [ -e "$ini" ] || return 3
    
    local profs=()
    while IFS= read -r prof; do
        profs+=("$prof" "")
    done < <(awk -F'=' '/^Path/ {print $2}' < "$ini")

    if [ ${#profs[@]} -eq 0 ]; then
        dialog --title "SafeFox" --msgbox "Browser isn't installed or wrong profiles folder"
        return 1
    fi
    dialog --title 'SafeFox' --menu "Select Profile" 15 40 5 "${profs[@]}" 3>&1 1>&2 2>&3
}

encrypted_prof(){
    local profdir="$1" 
    local proflist=()
    
    while read -r prof; do 
        proflist+=("$prof" "")
    done < <(awk '/.*\.gpg/ {print $0}' <(ls "$profdir"))
    
    if [ ${#proflist[@]} -eq 0 ]; then
        dialog --title "SafeFox" \
               --msgbox "No encrypted profile available for this browser" 8 80 3>&1 1>&2 2>&3;
        return 2
    fi
    dialog --title 'SafeFox' \
           --menu 'Select encrypted profile to restore' 15 40 5 "${proflist[@]}" 3>&1 1>&2 2>&3
}

pgp_recipient(){
    local list=()
    while IFS= read -r key; do
        list+=("$key" "")
    done < <(gpg --list-keys | grep -oP '(?<=\<).*(?=\>)' | sort)
    
    if [ ${#list[@]} -eq 0 ]; then
        dialog --title "SafeFox" --msgbox "No PGP recipients available"; return 2
    fi
    dialog --title 'SafeFox' --menu "Select Recipient" 40 80 30 "${list[@]}" 3>&1 1>&2 2>&3
}

encrypt(){
    local profdir=$1 
    local profile=$2
    local destdir=$3
    local recipient=$4
    local tarfile="${profile}.tar"
    local gpgfile="${profile}.gpg"
  
    {
        if ! tar --directory="$profdir" -cf "$destdir/$tarfile" "$profile"; then 
            dialog --title "SafeFox" --infobox "An error occurred. Exiting" 15 80;
            sleep 2;
            return 2;
        fi
        echo 100
    } | dialog --title "SafeFox" --gauge "Archiving profile..." 8 80

       if [ ! "$recipient" ];then
       	   rm -r "$TMPDIR/$profdir"
       	   return 1
       fi
       gpg -o "$destdir/$gpgfile" --encrypt --recipient "$recipient" "$destdir/$tarfile" 2> /dev/null
    
   return 0
}

sanitize(){
    local profpath=$1
    local cachedir=$HOME/.cache/${profpath//$HOME\/\./}/
    [ "$profpath" ] || exit 1

    if ! dialog --title "SafeFox" --yesno "The following data will be wiped:\n\n\
Decrypted profile directory: $profpath\n\
Remember:\n
1 - If you forget the password or lose access of your private key the profile will be inaccessible.\n\
2 - This process is irreversible.\n\
3 - Make a backup copy for precaution.\n\n\
Continue? " 15 100; then
        return 1
    fi
    { find "$profpath" -type f -iname '*' -exec shred -u {} +; rm -r "$profpath"
        echo 100
    } | dialog --title "SafeFox" --gauge "Wiping old profile files..." 8 80

    if ! dialog --title "SafeFox" --yesno \
                "Do you also want to delete the cache directory:\nCache Dir: $cachedir" 8 80; then
        return 0
    fi
    
    { find "$cachedir" -type f -iname "*" -exec shred -u {} +; rm -r "$cachedir"
        echo 100
    } | dialog --title "SafeFox" --gauge "Wiping cache..."

    return 0
}

decrypt(){
    {   local profdir=$1 
        local gpgfile=$2 
        local tarfile=$3 
        local destdir=$4
        
        gpg --decrypt --quiet -o "$destdir/$tarfile" "$profdir/$gpgfile"
        
        echo 50 
        if ! tar --directory="$destdir" -xf "$destdir/$tarfile"; then
            return 1
        fi

        echo 100
    } | dialog --title "SafeFox" --gauge "Decripting profile..." 8 80
}

prompt_sandbox(){
    dialog --title 'SafeFox' --menu 'Select Encyption Method' 10 90 2 \
    "0" "   Launches the browser without any sandbox isolation" \
	"1" "   Launches the browser within a SUID isolation" \
    "2" "   Sandbox isolation plus Apparmor" \
	"3" "   SUID isolation and X11 Nested Session (X11 only)" \
    "4" "   All the options above combined" \
    3>&1 1>&2 2>&3
}

set_sandbox_args(){
	[[ $default_sandbox ]] && return 1;
	case $1 in
		"0") export FJ="";;
		"1") export FJ="1";;
		"2") export FJ="1"; FA="--apparmor";;
		"3") export FJ="1"; FA="--x11";;
		"4") export FJ="1"; FA="--apparmor --x11";;
	esac
}

run_browser(){
    dialog --title "SafeFox" --infobox "Starting browser..." 8 80
    case $1 in
        "Firefox") $FJ firefox --private-window --profile "$TMPDIR/$2" &> /dev/null;;
        "Librewolf")
			firejail --profile=librewolf librewolf --private-window --profile "$TMPDIR/$2" &> /dev/null ;;
        	# TODO: Check for the presence of apparmor profile before running
        	# Also enforces the need for the apparmor pachage in case of wanting to use 
        	# the feature
        	#if [[ $FJ ]] then;
	        #	firejail "${FA}" --profile=librewolf librewolf --private-window --profile "$TMPDIR/$2" &> /dev/null;
			#else
        	#	librewolf --private-window --profile "$TMPDIR/$2" &> /dev/null;
			#fi
        *) return 1;;
    esac
    dialog --title "SafeFox" --infobox "Closing the browser" 8 80
}


# == OPERATIONS == #
create(){
    # Select browser and sets profiles directory
    local profdir=$(browser_path "$(which_browser)");
    [ "$profdir" ] || return 2
    
    # Get profile
    local profile=$(profile "$profdir");
    [ "$profile" ] || return 2
    
    # If the selected profile dir doesn't exist. It exits
    if [ ! -d "$profdir/$profile" ];then
        dialog --title "SafeFox" \
        --msgbox "There's no $profile directory at $profdir" 8 100
        return 0
    fi
    
    [ -d "$TMPDIR" ] || mkdir -m 700 "$TMPDIR"
    
    # encrypt <profile_rootdir> <profile> <destdir> <recipient>
    if ! encrypt "$profdir" "$profile" "$TMPDIR" "$(pgp_recipient)"; then
        dialog --title 'SafeFox' --infobox 'Operation canceled by the user' 8 80
        exit 
    fi
    
    [[ ! -e "$TMPDIR/${profile}.gpg" ]] && exit 2

    # Remove old and decrypted files
    if ! sanitize "$profdir/$profile"; then
        {  rm -r "$TMPDIR"
           echo 100
        } | dialog --title "SafeFox" --gauge "Operation aborted. Cleaning temporary files..." 8 80
        return 0
    fi

    # Moving encrypted profile to disk
    mv "$TMPDIR/${profile}.gpg" "$profdir"
    rm -r "$TMPDIR"
    sed -i "/Path=${profile}/ s/./#&/" "$profdir/profiles.ini"
    
    dialog --title 'SafeFox' \
           --msgbox 'Encrypted profile created with success.' 8 80 
    return 0
}

restore(){
    local profdir=$(browser_path "$(which_browser)"); 
    [ "$profdir" ] || return 0
    
    local gpgprof=$(encrypted_prof "$profdir"); 
    [ "$gpgprof" ] || return 0
    
    local tarprof="${gpgprof//gpg/tar}"
    local profile="${gpgprof//.gpg/}"

    [ -d "$TMPDIR" ] || mkdir -m 700 "$TMPDIR"
    
    # decrypt <profiles_dir> <gpg_file_name> <tar_file_name> <destdir>
    decrypt "$profdir" "$gpgprof" "$tarprof" "$TMPDIR"
    
    if [ ! -d "$TMPDIR/${gpgprof%.gpg}" ] || [ ! -e "$TMPDIR/$tarprof" ]; then 
        dialog --title "SafeFox" --msgbox "\
        An error occuried while decripting the profile.\n\
        Check the logs at /var/tmp/safefox.log." 10 80 && 
        return 0
    fi
    
    mv "$TMPDIR/$profile" "$profdir"
    rm -r "$TMPDIR"
    rm "$profdir/$gpgprof"
    sed -i "/Path=${tarprof%%.*}/ s/#//" "$profdir/profiles.ini" 
    dialog --title "SafeFox" --msgbox "Profile restored with success..." 8 80

    return 0
}

load(){
   local browser=$(which_browser); [ "$browser" ] || return 0
   
   local profdir=$(browser_path "$browser")
   
   local gpgfile=$(encrypted_prof "$profdir"); [ "$gpgfile" ] || return 2

   # Read the recipient of the encrypted PGP file
   local recipient=$(gpg --pinentry-mode cancel --list-packets "$profdir/$gpgfile" | awk '/keyid/{print $9}')

   local tarfile=${gpgfile//gpg/tar}

    [ -d "$TMPDIR" ] || mkdir -m 700 "$TMPDIR"
    
    decrypt "$profdir" "$gpgfile" "$tarfile" "$TMPDIR"; 
    
    # If there's no directory, return an error
    [ ! -d "$TMPDIR/${tarfile//.tar/}" ] && rm -r "$TMPDIR" && return 1

    # Remove tmp tar file
    rm "$TMPDIR/$tarfile"

	# Setting sandbox level
	set_sandbox_args "$(prompt_sandbox)"

    # Running browser
    run_browser "$browser" "${gpgfile//.gpg/}"

    #TODO: Make an autosave function to automaticaly save the profile while it's being used

    # Reencrypting folder to save modifications 
    encrypt "$TMPDIR" "${gpgfile//.gpg}" "$TMPDIR" "$recipient"

    # Checks if the gpg profile was created in tmpfs
    # to avoid removing the original file by accident
    if [ ! -e "$TMPDIR/$gpgfile" ]; then
        dialog --title 'SafeFox' --msgbox \
            "An error occurried!.\n\
             Couldn't generate the encrypted file from the currently running profile.\n\
             Any changes to the profile won't be saved." 8 80
        rm -r "$TMPDIR"
        return 1
    fi

    # Remove old gpgfile
    rm "$profdir/$gpgfile"
    # Move the new profile from TMPDIR to PROFDIR
    mv "$TMPDIR/$gpgfile" "$profdir"
    rm -r "$TMPDIR"
    
    return 0
}

#MAIN FUNCTION
main(){
	# TODO: Make an recover function after an power failure
    arguments_parser "$@"
    [ "$help" ] && callforhelp
    while true; do
    	echo 1
        case $(operation) in 
            "Create") create;;
            "Restore") restore;;
            "Launch") load;;
            "") return 0 ;;  
        esac
        if ! dialog --title "SafeFox" --clear \
                    --yesno "Process finished. Do you want to make another operation?" \
                      8 80; then
            break
        fi
    done
}

main "$@"
clear
if hash cowsay; then
    cowsay -f tux "Goodbye, $USER"
else
    echo ":: Goodbye $USER"
fi
